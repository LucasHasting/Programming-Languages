#!/usr/bin/perl

#Name: Lucas Hasting
#Description: Makes use of child processes to generate random numbers and collect information from it
#Course: CS 410W
#Date: 3/2/2024
#Instructor: Mark Terwilliger
#References: https://stackoverflow.com/questions/50660900/how-to-use-variable-instead-of-a-file-handle
#            https://www.tutorialspoint.com/perl/perl_printf.htm
#            class notes/files provided by Dr. Terwilliger

#get arguments and validate amount of arguments
die("Usage: luhast-all.pl lower upper amount") if (@ARGV != 3);

#store arguments
$range_lower = $ARGV[0];
$range_upper = $ARGV[1];
$rand_amount = $ARGV[2];

#validate arguments
die("Impossible random amount") if ($rand_amount <= 0);
die("Impossible lower range") if ($range_lower < 0);
die("Impossible upper range") if ($range_upper < 0);
die("Impossible upper/lower range") if ($range_upper < $range_lower);

#delcare sum variables
my $sum = 0;
my $global_mean = 0;

#create pipes
pipe(INPUT2, OUTPUT2);
pipe(INPUT3, OUTPUT3);
pipe(INPUT4, OUTPUT4);
pipe(INPUT5, OUTPUT5);

#store input and output pipe variables in lists
@INPUTS = (INPUT2, INPUT3, INPUT4, INPUT5);
@OUTPUTS = (OUTPUT2, OUTPUT3, OUTPUT4, OUTPUT5);

#loop for 4 processes
foreach $i (0..3)
{
    #create pipe to send sum
    pipe(INPUT1, OUTPUT1);

    #fork for child process
    $ids[$i]=fork();

    if ($ids[$i]==0) {
        #child
        
        #close input/outputs
        close(INPUT1);
        foreach $j (@OUTPUTS){
            close($j);
        }

        #create list for random numbers
        @list_of_randoms;

        #get random numbers and their sum
        for($j = 0; $j < $rand_amount; $j++){
            $list_of_randoms[$j] = rand($range_upper - $range_lower) + $range_lower;
            $sum += $list_of_randoms[$j];
        }

        #send sum information
        print OUTPUT1 $sum;
        close(OUTPUT1);
        
        #give each process some time
        sleep(2);

        #get global mean from parent
        $global_mean = $INPUTS[$i];
        $global_mean = <$global_mean>;

        #get local mean 
        $local_mean = $sum / $rand_amount;
        
        #get items below and above global mean
        $above = 0;
        $below = 0;
        for($j = 0; $j < $rand_amount; $j++){
            if($list_of_randoms[$j] < $global_mean){
                $below++;
            } elsif ($list_of_randoms[$j] > $global_mean){
                $above++;
            }
        }

        #print header information
        printf("%-7s  %-5s  %-6.2f  %-5s  %-5s\n", $i, $$, $local_mean, $below, $above);
        exit;
    } else { 
        #parent
   
        #close output
        close(OUTPUT1);

        #retrieve sums from children
        $global_mean += <INPUT1>;

        #last itteration
        if ($i == 3){
            #calculate global mean and send the children
            $global_mean /= 4 * $rand_amount;
            foreach $j (0..3){
                print {$OUTPUTS[$j]} $global_mean;
                close($OUTPUTS[$j]);
            }
            
            #display header information
            print "Range of numbers: $range_lower through $range_upper\n";
            print "Numbers generated by each process: $rand_amount\n";
            printf("Global mean (rounded to nearest hundredth): %.2f\n", $global_mean);
            print "\nAnalysis compared to the global mean:\n\n";
            printf("%-7s  %-5s  %-6s  %-5s  %-5s\n", "Process", "PID", "Mean", "Below", "Above");
            print "-------  -----  ------  -----  -----\n";
            
            #close outputs
            foreach $j (@OUTPUTS){
                close($j);
            }
        }
    }
}

# wait for children to finish
foreach $j (0..3) {
    $x = waitpid $ids[$j], 0;
}
